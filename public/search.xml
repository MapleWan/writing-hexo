<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1_3无重复字符的最长子串</title>
    <url>/_posts/0_codetop_play/1_3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="关于题目"><a href="#关于题目" class="headerlink" title="关于题目"></a>关于题目</h1><h2 id="题目url"><a href="#题目url" class="headerlink" title="题目url"></a>题目url</h2><ol>
<li><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">中文站</a></li>
<li>国际站 (上述链接<code>cn</code>改为<code>com</code>)</li>
</ol>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<p><strong>输入:</strong> s &#x3D; “abcabcbb”<br><strong>输出:</strong> 3<br><strong>解释:</strong> 因为无重复字符的最长子串是 <code>&quot;abc&quot;</code>，所以其长度为 3。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><img src="/images/20240202135407.png"></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>codetop刷题</category>
      </categories>
  </entry>
  <entry>
    <title>1Git配置与基本理论</title>
    <url>/_posts/4_%E5%B7%A5%E5%85%B7/1_git/1Git%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">参考资料</a></p>
<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>windows下载安装包（<a href="https://github.com/git-for-windows/git/releases/download/v2.40.1.windows.1/Git-2.40.1-64-bit.exe">链接</a>）    ‘‘下一步…..’’</p>
<p>Ubuntu中 <code>apt update &amp; apt install git</code></p>
<h1 id="2-必要配置"><a href="#2-必要配置" class="headerlink" title="2. 必要配置"></a>2. 必要配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置用户名和email地址，必须设置的   global表示全局配置</span></span><br><span class="line">git config --global user.name &quot;MapleWan&quot;</span><br><span class="line">git config --global user.email &quot;1041709112@qq.com&quot;</span><br><span class="line"></span><br><span class="line">git config -l # 所有的配置</span><br><span class="line">git config --system --list  # 系统的配置</span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>
<p>所有的这些配置都是保存在本地的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Git\etc\gitconfig  # 系统配置</span><br><span class="line">C:\Users\maple\.gitconfig    # 用户全局配置</span><br></pre></td></tr></table></figure>


<h1 id="3-基本理论"><a href="#3-基本理论" class="headerlink" title="3. 基本理论"></a>3. 基本理论</h1><p>git本地有三个工作区域：工作目录（working directory）、暂存区（stage）、资源库（repository）。加上远程的git仓库（remote directory）</p>
<ul>
<li>工作区（workspace）：平时存放项目代码的地方</li>
<li>暂存区（index、stage）：用于临时存放改动，事实上就是一个文件，保存即将提交到文件列表信息</li>
<li>仓库区（repository）：安全存放数据的位置，这里有提交到所有版本的数据。其中HEAD指向最新放入的仓库版本</li>
<li>远程库（remote）：托管代码的服务器，可以简单地认为是项目组中的一台电脑用于远程数据交换</li>
</ul>
<p><img src="/images/20230607005128.png"><br>本地的三个区域确切地说应该是git仓库中HEAD指向的版本<br><img src="/images/20230607005825.png"></p>
<ul>
<li>Directory：使用git管理的目录，也就是一个仓库，包含我们的工作空间和git的管理空间</li>
<li>WorkSpace：需要通过git进行版本控制的目录和文件。这些目录和文件组成了工作空间</li>
<li>.git：存放git管理信息的目录，初始化仓库的时候自动创建</li>
<li>index&#x2F;Stage：暂存区，或者叫 待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会指向当前的开发分支</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态</li>
</ul>
<h2 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h2><p>git的工作流程一般是：</p>
<ol>
<li>在工作目录添加、修改文件</li>
<li>将需要进行版本管理的文件放入暂存区域  <code>git add .</code></li>
<li>将暂存区域的文件提交到git仓库 <code>git commit</code></li>
</ol>
<p>因此，git管理的文件有三种状态：已修改（modified），已暂存（staged），已提交（committed）</p>
<p><img src="/images/20230607010427.png"></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>2Git基本使用</title>
    <url>/_posts/4_%E5%B7%A5%E5%85%B7/1_git/2Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-项目的创建"><a href="#1-项目的创建" class="headerlink" title="1. 项目的创建"></a>1. 项目的创建</h1><p>工作目录一般就是我们希望git帮助管理的文件夹，可以是项目的目录，也可以是空目录，尽量不要有中文。</p>
<p>常见的6个命令如下图<br><img src="/images/20230607195844.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init #初始化本地目录</span><br></pre></td></tr></table></figure>

<h1 id="2-git的基本操作"><a href="#2-git的基本操作" class="headerlink" title="2. git的基本操作"></a>2. git的基本操作</h1><h2 id="2-1-文件状态"><a href="#2-1-文件状态" class="headerlink" title="2.1 文件状态"></a>2.1 文件状态</h2><p>文件有4种状态：</p>
<ul>
<li>untracked：未跟踪，此文件在文件夹中，但没有加入到git库，不参与版本控制。通过<code>git add</code>状态变为 staged</li>
<li>Unmodify：文件已经入库，未修改，即版本库中的文件快照内容和文件夹中完全一致，这种类型的文件有两种去处，如果他被修改，则变为modified， 如果使用<code>git rm</code>移出版本库，则成为Untracked文件</li>
<li>Modified：文件已修改，仅仅是修改，并没有进行其他的操作，这个文件也有两个去除，通过<code>git add</code>可进入暂存staged状态，使用<code>git checkout</code>则丢弃修改过，犯过unmodify状态，这个<code>git checkout</code>即从库中去除文件，覆盖当前修改</li>
<li>Staged：暂存状态，执行<code>git commit</code>则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为Unmodify状态，执行<code>git reset HEAD filename</code>取消暂存，文件状态为Modified</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status # 查看文件的状态</span><br><span class="line">git add . # 添加文件至暂存区</span><br><span class="line">git commit -m “new file hello.py” # 提交暂存区的内容至本地仓库 -m 为提交信息 </span><br></pre></td></tr></table></figure>

<h2 id="2-1-忽略文件"><a href="#2-1-忽略文件" class="headerlink" title="2.1 忽略文件"></a>2.1 忽略文件</h2><p>有时候不想把文件纳入版本控制，比如数据库文件等<br>在主目录下建立“.gitignore”文件，此文件有如下的规则：</p>
<ol>
<li>忽略文件中的空行或以“#“号开始的行将会被忽略</li>
<li>可以使用Linux的通配符</li>
<li>如果名称的最前面有一个感叹号，表示例外规则，将不被忽略</li>
<li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略</li>
<li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt #忽略所有 .txt结尾的文件</span><br><span class="line">!lib.txt #但lib.txt除外</span><br><span class="line">/temp # 仅忽略项目根目录下的文件，不包括其他目录temp</span><br><span class="line">build/ # 忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt #忽略doc下的所有.txt文件, 但不包括doc子目录下的txt文件</span><br></pre></td></tr></table></figure>

<h1 id="3-码云免密码登录"><a href="#3-码云免密码登录" class="headerlink" title="3. 码云免密码登录"></a>3. 码云免密码登录</h1><p>id_rsa.pub文件中的内容添加到gitee设置中的SSH公钥选项</p>
<p>git add . -&gt;  git commit -m “message” -&gt; git push</p>
<h1 id="4-git-分支"><a href="#4-git-分支" class="headerlink" title="4. git 分支"></a>4. git 分支</h1><p><img src="/images/20230607223051.png"></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>3Git命令大全</title>
    <url>/_posts/4_%E5%B7%A5%E5%85%B7/1_git/3Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>来自 <a href="https://gitee.com/all-about-git">https://gitee.com/all-about-git</a></p>
<h1 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1 仓库"></a>1 仓库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>

<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>

<h1 id="3-增加或删除文件"><a href="#3-增加或删除文件" class="headerlink" title="3 增加或删除文件"></a>3 增加或删除文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h1 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4 代码提交"></a>4 代码提交</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h1 id="5-分支"><a href="#5-分支" class="headerlink" title="5 分支"></a>5 分支</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<h1 id="6-标签"><a href="#6-标签" class="headerlink" title="6 标签"></a>6 标签</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>

<h1 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7 查看信息"></a>7 查看信息</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
<h1 id="8-远程同步"><a href="#8-远程同步" class="headerlink" title="8 远程同步"></a>8 远程同步</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>
<h1 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9 撤销"></a>9 撤销</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line">暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h1 id="10-其他"><a href="#10-其他" class="headerlink" title="10 其他"></a>10 其他</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
